"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DecoderError: function() {
        return DecoderError;
    },
    bool: function() {
        return bool;
    },
    string: function() {
        return string;
    },
    number: function() {
        return number;
    },
    int: function() {
        return int;
    },
    float: function() {
        return float;
    },
    bigint: function() {
        return bigint;
    },
    array: function() {
        return array;
    },
    field: function() {
        return field;
    },
    optional: function() {
        return optional;
    },
    nullable: function() {
        return nullable;
    }
});
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _construct(Parent, args, Class) {
    if (_is_native_reflect_construct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _set_prototype_of(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _is_native_function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _wrap_native_super(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrap_native_super = function wrapNativeSuper(Class) {
        if (Class === null || !_is_native_function(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _get_prototype_of(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _set_prototype_of(Wrapper, Class);
    };
    return _wrap_native_super(Class);
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
var DecoderError = /*#__PURE__*/ function(Error1) {
    "use strict";
    _inherits(DecoderError, Error1);
    var _super = _create_super(DecoderError);
    function DecoderError() {
        _class_call_check(this, DecoderError);
        return _super.apply(this, arguments);
    }
    return DecoderError;
}(_wrap_native_super(Error));
var bool = function(json) {
    if (typeof json !== "boolean") {
        throw new DecoderError("Expected boolean, got ".concat(JSON.stringify(json)));
    }
    return json;
};
var string = function(json) {
    if (typeof json !== "string") {
        throw new DecoderError("Expected string, got ".concat(JSON.stringify(json)));
    }
    return json;
};
var number = function(json) {
    if (typeof json !== "number") {
        throw new DecoderError("Expected number, got ".concat(JSON.stringify(json)));
    }
    return json;
};
var int = function(json) {
    var x = number(json);
    if (!Number.isInteger(x)) {
        throw new DecoderError("Expected integer, got ".concat(JSON.stringify(json)));
    }
    return x;
};
var float = function(json) {
    var x = number(json);
    if (Number.isInteger(x)) {
        throw new DecoderError("Expected float, got ".concat(JSON.stringify(json)));
    }
    return x;
};
var bigint = function(json) {
    if ((typeof json === "undefined" ? "undefined" : _type_of(json)) !== "bigint") {
        throw new DecoderError("Expected bigint, got ".concat(JSON.stringify(json)));
    }
    return json;
};
var array = function(decoder) {
    return function(json) {
        if (!Array.isArray(json)) {
            throw new DecoderError("Expected array, got ".concat(JSON.stringify(json)));
        }
        var length = json.length;
        var result = new Array(length);
        for(var i = 0; i < length; ++i){
            var value = void 0;
            try {
                value = decoder(json[i]);
            } catch (e) {
                if (_instanceof(e, DecoderError)) {
                    throw new DecoderError(e.message + "\n	 at index " + String(i));
                }
                throw e;
            }
            result[i] = value;
        }
        return result;
    };
};
var field = function(key, decode) {
    return function(json) {
        if (typeof json === "object" && !Array.isArray(json) && json != null) {
            var value = json[key];
            if (key in json) {
                try {
                    return decode(value);
                } catch (err) {
                    if (_instanceof(err, DecoderError)) {
                        throw new DecoderError(err.message + ("\n	at field '" + (key + "'")));
                    }
                    throw err;
                }
            } else {
                throw new DecoderError("Expected field '" + key + "'");
            }
        } else {
            throw new DecoderError("Expected object, got " + JSON.stringify(json));
        }
    };
};
var optional = function(decoder) {
    return function(json) {
        try {
            return decoder(json);
        } catch (e) {
            if (_instanceof(e, DecoderError)) {
                return undefined;
            }
            throw e;
        }
    };
};
var nullable = function(decoder) {
    return function(json) {
        return json === null ? json : decoder(json);
    };
};
